Code a Fill-in-the-Blanks Quiz

You've built a Mad-Libs game with some help from Sean. Now you'll work on your own game to practice your 
skills and demonstrate what you've learned.

For this project, you'll be building a fill-in-the-blanks quiz. Your quiz will prompt a user with a sentence 
containing several blanks. The user should then be asked to fill in each blank appropriately to complete the 
sentence. This can be used as a study tool to help you remember important vocabulary!

Note: Your game will have to accept user input so, like the Mad Libs generator, you won't be able to run it using 
Sublime's Build feature. Instead you'll need to run the program in Terminal or IDLE. Refer to Work Session 5 if 
you need a refresher on how to do this.

Once you've created the game you should submit your Python file (named fill-in-the-blanks.py). 
Your project reviewer will review and provide feedback on two aspects of your submission: the game itself 
and the Python code you've written.

In the Downloadables section below, you'll find a starter code file (fill-in-the-blanks.py) to help you get going. 
We've also given you a file called fill-in-the-blanks.pyc which is a working version of the project. A .pyc file is a 
Python file that has been translated into "byte code". This means the code will run the same as the original .py 
file, but if you open it in Sublime it won't look like Python code! You can run it just like a regular Python file to 
see how your code should behave.

Project Submission
In this stage, you will use the Python programming language to build your own quiz. You will use a fill-in-the blank style to create a quiz that can even be used as a study tool to help you remember important vocabulary.

1 - Game Review

In this portion of the review, your reviewer will be checking to make sure the game works the way it's supposed to. See the rubric below for exact specs.

2 - Code Review

Your reviewer will also look at the Python code you've written and provide feedback on:

Use of Variables: Your code should take advantage of variables and variable names should reflect the values they store.
Functions: Your code should use functions appropriately to avoid repetition. Function parameters should have logical names and should all be used in the body of the function.
Appropriate use of Data: Data types (strings vs lists for example) should be used appropriately.
Appropriate use of other coding techniques: Your code should use statements like if, then, else, while, etc... appropriately.
Each function includes a comment: Comments explain function behavior, inputs, and outputs (if applicable.)